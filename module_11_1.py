import numpy as np

# Создание двумерного массива из двух одномерных
arr1 = np.array([[1, 2, 3], [4, 5, 6]])

print(arr1)

# Вывод количества размерностей массива
print(arr1.ndim)

# Вывод размеров массива
print(arr1.shape)

arr2 = np.array([[6, 5, 4], [3, 2, 1]])

# Сложение двух массивов с одинаковой структурой
arr3 = arr1 + arr2
print(arr3)

# Умножение двух массивов с одинаковой структурой и размерами
arr4 = arr1 * arr2
print(arr4)

# Целочисленное индексирование - вывод элемента с индексом: 1 (ось 1) / 0 (ось 0), 1/2, 0/1
index = arr2[[1, 1, 0], [0, 2, 1]]
print(index)

# Нахождение минимального и максимального значения по каждой оси
print(np.amin(arr2, 1))
print(np.amin(arr2, 0))
print(np.amax(arr2, 1))
print(np.amax(arr2, 0))

# NumPy — библиотека для Python, позволяющая работать с многомерными массивами и матрицами, отличающаяся быстротой
# и эффективностью. Применяется в сфере машинного обучения, создания искусственного интеллекта, обработки и
# статистического анализа данных, а так же в области финансовых вычислений — расчёт доходности активов и инвестиций,
# риск-менеджмент, оценка дисконтированной стоимости и т.д.


import requests

# Отправка запроса к сайту, сохранение ответа в переменную
response = requests.get('http://intoclassics.net/')

# Вывод ответа
print(response)

# Вывод кода ответа
print(response.status_code)

# Вывод содержимого (текстовой части) ответа
print(response.text)

# Вывод заголовков ответа
print(response.headers)

# Вывод даты, хранящейся в заголовке ответа
print(response.headers['Date'])

# Requests - широко используемая библиотека для выполнения HTTP-запросов на языке Python, созданная для упрощения
# взаимодействия с API и веб-сервисами, получения данных с веб-сайтов и выполнения других задач на основе HTTP.
# Разработчики библиотеки Requests стремились сделать ее максимально простой в изучении и использовании (стандартные
# HTTP-библиотеки Python сложнее и часто требуют значительно больше операторов для выполнения одной и той же задачи).


from PIL import Image

# Создание объекта изображения
image = Image.open('Rackham_Leviathan.jpg')

# Вывод формата изображения
print(image.format)

# Вывод ширины изображения
print(image.width)

# Вывод высоты изображения
print(image.height)

# Сохранение изображения в другом формате
image.save('Rackham_Leviathan_formatted.png')

# Зеркальное отражение изображения по вертикали
image.transpose(Image.Transpose.FLIP_TOP_BOTTOM).show()
image.transpose(Image.Transpose.FLIP_TOP_BOTTOM).save('Rackham_Leviathan_transpose.png')

# Получение изображения в оттенках серого
image.convert('L').show()
image.convert('L').save('Rackham_Leviathan_grayscale.png')

# Изменение размеров изображения с сохранением пропорций
image.thumbnail((500, 500))
image.save('Rackham_Leviathan_thumbnail.png')

# Pillow является форком библиотеки Python Imaging Library (PIL). PIL не обновлялась с 2009 года и не поддерживает
# Python 3. Pillow предоставляет больше возможностей, поддерживает такие форматы файлов изображений, как .PNG, .JPEG,
# .PPM, .GIF, .TIFF и .BMP. С её помощью можно выполнять различные операции с изображениями, такие как обрезка,
# изменение размера, добавление текста, поворот, преобразование к оттенкам серого и др.